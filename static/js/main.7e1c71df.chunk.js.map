{"version":3,"sources":["components/Form.js","components/Weather.js","components/Title.js","App.js","serviceWorker.js","index.js"],"names":["Form","react_default","a","createElement","onSubmit","this","props","getWeather","className","type","name","Component","Weather","humidity","pressure","wind","deg","Title","concat","city","country","src","icon","temperture","description","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","api_all","data","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","sent","json","console","log","setState","main","temp","sys","weather","temp_min","temp_max","speed","sunrise","sunset","lon","coord","lat","error","stop","_x","apply","arguments","getWeather_onload","_callee2","_context2","state","undefined","id","components_Title","components_Form","components_Weather","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAwBeA,0LAlBR,OACKC,EAAAC,EAAAC,cAAA,QAAMC,SAAUC,KAAKC,MAAMC,YAEvBN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,kCACbP,EAAAC,EAAAC,cAAA,SAAOK,UAAU,uBAAuBC,KAAK,OAAOC,KAAK,SACzDT,EAAAC,EAAAC,cAAA,SAAOK,UAAU,wBAAjB,mBAGFP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,kCACXP,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQK,UAAU,mEAAlB,qBAbDG,cC8BJC,mLA3BR,OACCX,EAAAC,EAAAC,cAAA,OAAKK,UAAU,YACXP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,4BACXP,EAAAC,EAAAC,cAAA,SAAOK,UAAU,oCACbP,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIK,UAAU,qCAAd,YACAP,EAAAC,EAAAC,cAAA,UAAKE,KAAKC,MAAMO,SAAhB,OAEJZ,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIK,UAAU,qCAAd,YACAP,EAAAC,EAAAC,cAAA,UAAKE,KAAKC,MAAMQ,SAAhB,SAEJb,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIK,UAAU,qCAAd,QACAP,EAAAC,EAAAC,cAAA,mBAAWE,KAAKC,MAAMS,KAAtB,OAA+Bd,EAAAC,EAAAC,cAAA,WAA/B,OAAyCE,KAAKC,MAAMU,iBAlB1DL,aCYPM,mLAXX,OACEhB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,wBAAAe,OAAmBb,KAAKC,MAAMa,MAA9B,IAAuCd,KAAKC,MAAMc,SAClDnB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,OAAKkB,IAAG,OAAAH,OAASb,KAAKC,MAAMgB,KAApB,UAAkCjB,KAAKC,MAAMiB,WAAzD,WACAtB,EAAAC,EAAAC,cAAA,MAAIK,UAAU,QAAQH,KAAKC,MAAMkB,qBANvBb,aCmILc,cA7Hb,SAAAA,EAAYnB,GAAM,IAAAoB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAtB,KAAAoB,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAtB,KAAAsB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA1B,KAAMC,KAuBRC,WAxBkB,eAAAyB,EAAAL,OAAAM,EAAA,EAAAN,CAAAO,EAAAhC,EAAAiC,KAwBL,SAAAC,EAAOC,GAAP,IAAAlB,EAAAmB,EAAAC,EAAA,OAAAL,EAAAhC,EAAAsC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACXN,EAAEO,iBACIzB,EAAOkB,EAAEQ,OAAOC,SAAS3B,KAAK4B,MAFzBN,EAAAE,KAAA,EAGWK,MAAK,qDAAA9B,OAAsDC,EAAtD,4DAHhB,cAGLmB,EAHKG,EAAAQ,KAAAR,EAAAE,KAAA,EAIQL,EAAQY,OAJhB,OAILX,EAJKE,EAAAQ,KAKXE,QAAQC,IAAIb,GACZY,QAAQC,IAAIjC,GAEZO,EAAK2B,SAAS,CACZ9B,WAAYgB,EAAKe,KAAKC,KACtBpC,KAAMoB,EAAK7B,KACXU,QAASmB,EAAKiB,IAAIpC,QAClBP,SAAU0B,EAAKe,KAAKzC,SACpBW,YAAae,EAAKkB,QAAQ,GAAGjC,YAC7BF,KAAMiB,EAAKkB,QAAQ,GAAGnC,KACtBR,SAAUyB,EAAKe,KAAKxC,SACpB4C,SAAUnB,EAAKe,KAAKI,SACpBC,SAAUpB,EAAKe,KAAKK,SACpB5C,KAAMwB,EAAKxB,KAAK6C,MAChB5C,IAAKuB,EAAKxB,KAAKC,IACf6C,QAAStB,EAAKiB,IAAIK,QAClBC,OAAQvB,EAAKiB,IAAIM,OACjBC,IAAKxB,EAAKyB,MAAMD,IAChBE,IAAK1B,EAAKyB,MAAMC,IAChBC,MAAO,KAxBE,yBAAAzB,EAAA0B,SAAA/B,MAxBK,gBAAAgC,GAAA,OAAApC,EAAAqC,MAAAhE,KAAAiE,YAAA,GAAA5C,EAoDlB6C,kBApDkB5C,OAAAM,EAAA,EAAAN,CAAAO,EAAAhC,EAAAiC,KAoDE,SAAAqC,IAAA,IAAAlC,EAAAC,EAAA,OAAAL,EAAAhC,EAAAsC,KAAA,SAAAiC,GAAA,cAAAA,EAAA/B,KAAA+B,EAAA9B,MAAA,cAAA8B,EAAA9B,KAAA,EACIK,MAAK,oHADT,cACZV,EADYmC,EAAAxB,KAAAwB,EAAA9B,KAAA,EAECL,EAAQY,OAFT,OAEZX,EAFYkC,EAAAxB,KAGlBE,QAAQC,IAAIb,GAEZb,EAAK2B,SAAS,CACZ9B,WAAYgB,EAAKe,KAAKC,KACtBpC,KAAMoB,EAAK7B,KACXU,QAASmB,EAAKiB,IAAIpC,QAClBP,SAAU0B,EAAKe,KAAKzC,SACpBW,YAAae,EAAKkB,QAAQ,GAAGjC,YAC7BF,KAAMiB,EAAKkB,QAAQ,GAAGnC,KACtBR,SAAUyB,EAAKe,KAAKxC,SACpB4C,SAAUnB,EAAKe,KAAKI,SACpBC,SAAUpB,EAAKe,KAAKK,SACpB5C,KAAMwB,EAAKxB,KAAK6C,MAChB5C,IAAKuB,EAAKxB,KAAKC,IACf6C,QAAStB,EAAKiB,IAAIK,QAClBC,OAAQvB,EAAKiB,IAAIM,OACjBC,IAAKxB,EAAKyB,MAAMD,IAChBE,IAAK1B,EAAKyB,MAAMC,IAChBC,MAAO,KArBS,wBAAAO,EAAAN,SAAAK,MAlDlB9C,EAAKgD,MAAQ,CACXnD,WAAY,OACZJ,UAAMwD,EACNvD,aAASuD,EACT9D,cAAU8D,EACVnD,YAAa,GACbV,cAAU6D,EACVjB,cAAUiB,EACVhB,cAAUgB,EACV5D,UAAM4D,EACN3D,SAAK2D,EACLd,aAASc,EACTb,YAAQa,EACRZ,SAAKY,EACLV,SAAKU,EACLrD,UAAMqD,EACNT,WAAOS,GAGTjD,EAAK6C,oBArBW7C,wEA8EhB,OAEEzB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,YACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,6BAEfP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,2BAA2BoE,GAAG,SACzC3E,EAAAC,EAAAC,cAAA,OAAKK,UAAU,2CACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,mBACbP,EAAAC,EAAAC,cAAA,MAAIK,UAAU,wBAAuBP,EAAAC,EAAAC,cAAA,8BAGvCF,EAAAC,EAAAC,cAAA,OAAKK,UAAU,6BAEXP,EAAAC,EAAAC,cAAC0E,EAAD,CACEtD,WAAclB,KAAKqE,MAAMnD,WACzBC,YAAcnB,KAAKqE,MAAMlD,YACzBF,KAAQjB,KAAKqE,MAAMpD,KACnBH,KAAQd,KAAKqE,MAAMvD,KACnBC,QAAWf,KAAKqE,MAAMtD,UAGxBnB,EAAAC,EAAAC,cAAC2E,EAAD,CAAMvE,WAAYF,KAAKE,aAEvBN,EAAAC,EAAAC,cAAC4E,EAAD,CACExD,WAAclB,KAAKqE,MAAMnD,WACzBV,SAAYR,KAAKqE,MAAM7D,SACvBqD,MAAS7D,KAAKqE,MAAMR,MACpBL,QAAWxD,KAAKqE,MAAMb,QACtBC,OAAUzD,KAAKqE,MAAMZ,OACrBhD,SAAYT,KAAKqE,MAAM5D,SACvBC,KAAQV,KAAKqE,MAAM3D,KACnBC,IAAOX,KAAKqE,MAAM1D,OAIxBf,EAAAC,EAAAC,cAAA,OAAKK,UAAU,qCAAqCoE,GAAG,UACvD3E,EAAAC,EAAAC,cAAA,KAAIyE,GAAG,SAASpE,UAAU,uBAAuBwE,KAAK,mDAAmDnC,OAAO,UAAS5C,EAAAC,EAAAC,cAAA,KAAGK,UAAU,oCApHlIG,aCMEsE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtF,EAAAC,EAAAC,cAACqF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7e1c71df.chunk.js","sourcesContent":["\r\nimport React,{ Component } from 'react';\r\n\r\nclass Form extends Component{\r\n\r\n    render() {\r\n       return(\r\n            <form onSubmit={this.props.getWeather}>\r\n\r\n                <div className=\"mdl-textfield mdl-js-textfield\">\r\n                  <input className=\"mdl-textfield__input\" type=\"text\" name=\"city\"/>\r\n                  <label className=\"mdl-textfield__label\">Type your City</label>\r\n                </div>\r\n\r\n                <div className=\"mdl-textfield mdl-js-textfield\">\r\n                    <br/>\r\n                    <button className=\"mdl-button mdl-js-button mdl-button--raised mdl-button--colored\">Get data</button>\r\n                </div>\r\n\r\n            </form> \r\n       ); \r\n    }\r\n}\r\n\r\nexport default Form;","\r\nimport React,{ Component } from 'react';\r\n\r\nclass Weather extends Component{\r\n\r\n    render() {\r\n       return(\r\n        <div className=\"mdl-grid\">\r\n            <div className=\"mdl-cell mdl-cell--4-col\">\r\n                <table className=\"mdl-data-table mdl-js-data-table\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td className=\"mdl-data-table__cell--non-numeric\">Humidity</td>\r\n                            <td>{this.props.humidity} %</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"mdl-data-table__cell--non-numeric\">Pressure</td>\r\n                            <td>{this.props.pressure} hpa</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td className=\"mdl-data-table__cell--non-numeric\">Wind</td>\r\n                            <td>Speed,{this.props.wind} m/s<br/>Deg {this.props.deg}</td>\r\n                        </tr>\r\n                        \r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n\r\n        </div>\r\n       ); \r\n    }\r\n}\r\n\r\nexport default Weather;","import React, { Component } from 'react';\r\n\r\nclass Title extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n          <h4>{`Weather in ${this.props.city}`},{this.props.country}</h4>\r\n          <h1><img src={`img/${this.props.icon}.png`}/>{this.props.temperture} &#8451;</h1>\r\n          <h6 className=\"desc\">{this.props.description}</h6>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default Title;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\nimport Title from \"./components/Title\";\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      temperture: '00.0',\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: \"\",\n      pressure: undefined,\n      temp_min: undefined,\n      temp_max: undefined,\n      wind: undefined,\n      deg: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      lon: undefined,\n      lat: undefined,\n      icon: undefined,\n      error: undefined\n    }\n\n    this.getWeather_onload();\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const api_all = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},lk&appid=8a1e7f96689eacff4a4cef41c5cc1901&units=metric`);\n    const data = await api_all.json();\n    console.log(data);\n    console.log(city);\n\n    this.setState({\n      temperture: data.main.temp,\n      city: data.name,\n      country: data.sys.country,\n      humidity: data.main.humidity,\n      description: data.weather[0].description,\n      icon: data.weather[0].icon,\n      pressure: data.main.pressure,\n      temp_min: data.main.temp_min,\n      temp_max: data.main.temp_max,\n      wind: data.wind.speed,\n      deg: data.wind.deg,\n      sunrise: data.sys.sunrise,\n      sunset: data.sys.sunset,\n      lon: data.coord.lon,\n      lat: data.coord.lat,\n      error: \"\"\n    })\n  }\n\n  getWeather_onload = async () => {\n    const api_all = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=kottawa,lk&appid=8a1e7f96689eacff4a4cef41c5cc1901&units=metric`);\n    const data = await api_all.json();\n    console.log(data);\n\n    this.setState({\n      temperture: data.main.temp,\n      city: data.name,\n      country: data.sys.country,\n      humidity: data.main.humidity,\n      description: data.weather[0].description,\n      icon: data.weather[0].icon,\n      pressure: data.main.pressure,\n      temp_min: data.main.temp_min,\n      temp_max: data.main.temp_max,\n      wind: data.wind.speed,\n      deg: data.wind.deg,\n      sunrise: data.sys.sunrise,\n      sunset: data.sys.sunset,\n      lon: data.coord.lon,\n      lat: data.coord.lat,\n      error: \"\"\n    })\n  }\n\n  render() {\n    return (\n      \n      <div className=\"mdl-grid\">\n        <div className=\"mdl-cell mdl-cell--4-col\"></div>\n\n        <div className=\"mdl-cell mdl-cell--4-col\" id=\"col_3\">\n            <div className=\"demo-card-wide mdl-card mdl-shadow--2dp\">\n              <div className=\"mdl-card__title\">\n                <h2 className=\"mdl-card__title-text\"><b>Weather Forcast</b></h2>\n              </div>\n\n              <div className=\"mdl-card__supporting-text\">\n\n                  <Title \n                    temperture = {this.state.temperture}\n                    description ={this.state.description}\n                    icon = {this.state.icon}\n                    city = {this.state.city}\n                    country = {this.state.country}\n                    /> \n\n                  <Form getWeather={this.getWeather}/>\n                  \n                  <Weather\n                    temperture = {this.state.temperture}\n                    humidity = {this.state.humidity}\n                    error = {this.state.error}\n                    sunrise = {this.state.sunrise}\n                    sunset = {this.state.sunset}\n                    pressure = {this.state.pressure}\n                    wind = {this.state.wind}\n                    deg = {this.state.deg}\n                  />\n              </div>\n              \n              <div className=\"mdl-card__actions mdl-card--border\" id=\"footer\">\n              <a  id=\"github\" className=\"mdl-navigation__link\" href=\"https://github.com/Dilshan97/React-Weather-meter\" target=\"_blank\"><i className=\"fab fa-lg fa-github\"></i></a>\n            </div>\n\n          </div>\n        </div>\n    </div>\n    \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}