{"version":3,"sources":["components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","temperture","city","country","humidity","description","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","api_all","data","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","setState","main","temp","sys","weather","error","stop","_x","apply","arguments","state","undefined","components_Title","components_Form","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAaeA,0LATX,OACEC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oCAJUC,cCeLC,mLAXR,OACKJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMG,SAAUC,KAAKC,MAAMC,YACvBR,EAAAC,EAAAC,cAAA,SAAOO,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAAQX,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WACxDF,EAAAC,EAAAC,cAAA,mCAPDC,aCeJS,mLAZR,OACKZ,EAAAC,EAAAC,cAAA,WACKI,KAAKC,MAAMM,WAAWb,EAAAC,EAAAC,cAAA,WACtBI,KAAKC,MAAMO,KAAKd,EAAAC,EAAAC,cAAA,WAChBI,KAAKC,MAAMQ,QAAQf,EAAAC,EAAAC,cAAA,WACnBI,KAAKC,MAAMS,SAAShB,EAAAC,EAAAC,cAAA,WACpBI,KAAKC,MAAMU,YAAYjB,EAAAC,EAAAC,cAAA,mBATlBC,aCsDPe,cAjDb,SAAAA,EAAYX,GAAM,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAd,KAAAY,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAd,KAAAc,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAlB,KAAMC,KAYRC,WAbkB,eAAAiB,EAAAL,OAAAM,EAAA,EAAAN,CAAAO,EAAA1B,EAAA2B,KAaL,SAAAC,EAAOC,GAAP,IAAAhB,EAAAiB,EAAAC,EAAA,OAAAL,EAAA1B,EAAAgC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACXN,EAAEO,iBACIvB,EAAOgB,EAAEQ,OAAOC,SAASzB,KAAK0B,MAFzBN,EAAAE,KAAA,EAGWK,MAAK,qDAAAC,OAAsD5B,EAAtD,4DAHhB,cAGLiB,EAHKG,EAAAS,KAAAT,EAAAE,KAAA,EAIQL,EAAQa,OAJhB,OAILZ,EAJKE,EAAAS,KAKXE,QAAQC,IAAId,GACZa,QAAQC,IAAIhC,GAEZK,EAAK4B,SAAS,CACZlC,WAAYmB,EAAKgB,KAAKC,KACtBnC,KAAMkB,EAAKtB,KACXK,QAASiB,EAAKkB,IAAInC,QAClBC,SAAUgB,EAAKgB,KAAKhC,SACpBC,YAAae,EAAKmB,QAAQ,GAAGlC,YAC7BmC,MAAO,KAdE,yBAAAlB,EAAAmB,SAAAxB,MAbK,gBAAAyB,GAAA,OAAA7B,EAAA8B,MAAAjD,KAAAkD,YAAA,GAGhBrC,EAAKsC,MAAQ,CACX5C,gBAAY6C,EACZ5C,UAAM4C,EACN3C,aAAS2C,EACT1C,cAAU0C,EACVzC,iBAAayC,EACbN,WAAOM,GATOvC,wEAgChB,OACEnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyD,EAAD,MACA3D,EAAAC,EAAAC,cAAC0D,EAAD,CAAMpD,WAAYF,KAAKE,aACvBR,EAAAC,EAAAC,cAAC2D,EAAD,CACEhD,WAAcP,KAAKmD,MAAM5C,WACzBC,KAAQR,KAAKmD,MAAM3C,KACnBC,QAAWT,KAAKmD,MAAM1C,QACtBC,SAAYV,KAAKmD,MAAMzC,SACvBC,YAAcX,KAAKmD,MAAMxC,YACzBmC,MAAS9C,KAAKmD,MAAML,gBA5CZjD,aCME2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.20a0d117.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Title extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n          <h1>Weather Finder</h1>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default Title;\r\n","\r\nimport React,{ Component } from 'react';\r\n\r\nclass Form extends Component{\r\n\r\n    render() {\r\n       return(\r\n            <div>\r\n                <form onSubmit={this.props.getWeather}>\r\n                    <input type=\"text\" name=\"city\" placeholder=\"city\"/><br/><br/>\r\n                    <button>Get data</button>\r\n                </form>\r\n            </div>\r\n       ); \r\n    }\r\n}\r\n\r\nexport default Form;","\r\nimport React,{ Component } from 'react';\r\n\r\nclass Weather extends Component{\r\n\r\n    render() {\r\n       return(\r\n            <div>\r\n                {this.props.temperture}<br/>\r\n                {this.props.city}<br/>\r\n                {this.props.country}<br/>\r\n                {this.props.humidity}<br/>\r\n                {this.props.description}<br/>\r\n            </div>\r\n       ); \r\n    }\r\n}\r\n\r\nexport default Weather;","import React, { Component } from 'react';\nimport './App.css';\nimport Title from \"./components/Title\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    //this.getWeather();\n    this.state = {\n      temperture: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: undefined\n    }\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const api_all = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},lk&appid=8a1e7f96689eacff4a4cef41c5cc1901&units=metric`);\n    const data = await api_all.json();\n    console.log(data);\n    console.log(city);\n\n    this.setState({\n      temperture: data.main.temp,\n      city: data.name,\n      country: data.sys.country,\n      humidity: data.main.humidity,\n      description: data.weather[0].description,\n      error: \"\"\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <Title/>\n        <Form getWeather={this.getWeather}/>\n        <Weather\n          temperture = {this.state.temperture}\n          city = {this.state.city}\n          country = {this.state.country}\n          humidity = {this.state.humidity}\n          description ={this.state.description}\n          error = {this.state.error}\n        />\n      </div>  \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}